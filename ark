#!/bin/bash

# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/thirdparty/icu
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/lib.unstripped/arkcompiler/ets_runtime
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/lib.unstripped/clang_x64/thirdparty/icu
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/arkcompiler/ets_frontend
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/arkcompiler/runtime_core
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/arkcompiler/ets_runtime

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/lib.unstripped/clang_x64/thirdparty/zlib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/lib.unstripped/clang_x64/thirdparty/icu
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/lib.unstripped/clang_x64/arkcompiler/ets_runtime
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/runtime_core
if [[ $OHOS_DEBUG == "on" ]]; then
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/exe.unstripped/clang_x64/arkcompiler/ets_runtime
else
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime
fi
export PATH=$PATH:$LD_LIBRARY_PATH

check() {
    if [ $? -ne 0 ]; then
        echo "[Error] $@ command failed with exit code $?"
        exit 1
    fi
}

run() {
    echo -e "\e[96m$@\e[0m"
    eval $@
    check $@
}

if [[ -z $1 ]]; then
    OHOS_JSVM_PATH=$(dirname $(which ark_js_vm) 2>/dev/null || echo -e '\e[31mUnset\e[0m')
    OHOS_LOG_LEVEL=$OHOS_LOG_LEVEL || echo -e '\e[31mUnset\e[0m'
    echo "OHOS_PATH: $OHOS_PATH"
    echo "OHOS_JSVM_PATH: $OHOS_JSVM_PATH"
    echo "OHOS_DEBUG: $OHOS_DEBUG"
    echo "OHOS_LOG_LEVEL: $OHOS_LOG_LEVEL"
    exit 0
fi

if [[ $1 == "aot" ]]; then
    ark_aot_compiler ${@:2}
    exit 0
fi

if [[ $1 == "vm" ]]; then
    ark_js_vm ${@:2}
    exit 0
fi

if [[ $1 == "init" ]]; then
    dir=$(dirname $(realpath $0))
    cat $dir/ark.bash
    exit 0
fi

if [[ $1 == "ut" ]]; then
    if [[ -n $2 ]]; then
        run "$OHOS_PATH/build.sh --product-name rk3568 --build-target ${2}Action --gn-args is_debug=true"
    else
        run "$OHOS_PATH/build.sh --product-name rk3568 --build-target ark_js_unittest --gn-args is_debug=true"
    fi
    exit 0
fi

if [[ $1 == "262" ]]; then
    run "cd $OHOS_PATH/arkcompiler/ets_frontend"
    if [[ $2 == "aot" ]]; then
        if [[ -n $3 ]]; then
            run "python3 $OHOS_PATH/arkcompiler/ets_frontend/test262/run_test262.py --file $3 --es2021 all --libs-dir $OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/icu:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/zlib:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib --ark-frontend-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/es2abc --ark-tool=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_js_vm --ark-aot-tool=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_aot_compiler --merge-abc-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/merge_abc --ark-aot --ark-frontend=es2panda"
        else
            run "python3 $OHOS_PATH/arkcompiler/ets_frontend/test262/run_test262.py --es2021 all --libs-dir $OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/icu:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/zlib:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib --ark-frontend-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/es2abc --ark-tool=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_js_vm --ark-aot-tool=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_aot_compiler --merge-abc-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/merge_abc --ark-aot --ark-frontend=es2panda"
        fi
    elif [[ $2 == "asm" ]]; then
        if [[ -n $3 ]]; then
            run "python3 $OHOS_PATH/arkcompiler/ets_frontend/test262/run_test262.py --file $3 --es2021 all --libs-dir $OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/icu:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/zlib:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/cjson:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib --ark-tool=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_js_vm --ark-frontend-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/es2abc --merge-abc-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/merge_abc --ark-frontend=es2panda"
        else
            run "python3 $OHOS_PATH/arkcompiler/ets_frontend/test262/run_test262.py --es2021 all --libs-dir $OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/icu:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/zlib:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/cjson:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib --ark-tool=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_js_vm --ark-frontend-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/es2abc --merge-abc-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/merge_abc --ark-frontend=es2panda"
        fi
    fi
    exit 0
fi

if [[ $1 == "build" ]]; then
    args=(
        "--product-name rk3568"
        "--build-target ets_frontend_build"
        "--build-target ark_js_packages"
        "--build-target ark_js_host_linux_tools_packages"
    )
    if [[ $OHOS_DEBUG == "on" ]]; then
        args+=("--gn-args is_debug=true")
    fi

    if [[ $@ =~ "-c" ]]; then
        args+=("--gn-flags=--export-compile-commands")
    fi

    if [[ $@ =~ "-f" ]]; then
        args+=("--fast-rebuild")
    fi

    if [[ $2 == "dasm" ]]; then
        run "$OHOS_PATH/build.sh --product-name rk3568 --build-target ark_host_linux_tools_packages"
    fi

    if [[ $2 == "pre" ]]; then
        run "$OHOS_PATH/build/prebuilts_download.sh"
    else
        run "$OHOS_PATH/build.sh ${args[@]}"
    fi
    exit 0
fi

if [[ $1 == "clean" ]]; then
    rm -rf *.abc *.ap *.ai *.an *.pa *.abc.ll *.abc_opt.ll *.log *.perf
    exit 0
fi

file_path=$1
file_name=$(basename "$file_path" | cut -d. -f1)

for arg in "$@"; do
    if [[ $arg == "abc" || $arg == "all" ]]; then
        args=(
            "--merge-abc"
            "--module"
            "--type-extractor"
            "--output $file_name.abc"
        )
        run "rm -f $file_name.abc"
        run "es2abc $file_path ${args[@]}"
    fi

    if [[ $arg == "ap" || $arg == "all" ]]; then
        args=(
            "--enable-pgo-profiler=true"
            "--compiler-pgo-profiler-path=$file_name.ap"
            "--entry-point=$file_name"
            "$file_name.abc"
        )
        run "rm -f $file_name.ap"
        run "ark_js_vm ${args[@]}"
    fi

    # --compiler-log=all0123 --log-level=info  --compiler-trace-bc=true
    if [[ "$arg" == "aot" || $arg == "all" ]]; then
        args=(
            "--compiler-trace-bc=true"
            "--compiler-pgo-profiler-path=$file_name.ap"
            "--aot-file=$file_name"
            "$file_name.abc"
        )
        run "rm -f $file_name.an $file_name.ai"
        run "ark_aot_compiler ${args[@]}"
    fi

    # --compiler-log=all0123 --log-level=info
    if [[ "$arg" == "asm" || $arg == "all" ]]; then
        args=(
            "--compiler-log=all0123 --log-level=info"
            # "--asm-interpreter=false"
            "--entry-point=$file_name"
            "--aot-file=$file_name"
            "$file_name.abc"
        )
        run "ark_js_vm ${args[@]}"
    fi

    # ark aot --log-components=compiler --compiler-log=all0123 --log-level=debug --aot-file=i i.abc
    if [[ "$arg" == "aotp" ]]; then
        run "ark_aot_compiler --aot-file=$file_name $file_name.abc"
    fi

    if [[ "$arg" == "aotlog" ]]; then
        run "ark_aot_compiler --compiler-log=all0123 --log-level=info --compiler-pgo-profiler-path=$file_name.ap --aot-file=$file_name $file_name.abc > $file_name.log"
    fi

    if [[ "$arg" == "aotd" ]]; then
        run "gdb --args ark_aot_compiler --enable-pgo-profiler=true --compiler-pgo-profiler-path=$file_name.ap --aot-file=$file_name $file_name.abc"
    fi

    if [[ "$arg" == "aotpd" ]]; then
        run "gdb --args ark_aot_compiler --aot-file=$file_name $file_name.abc"
    fi

    if [[ "$arg" == "asmp" ]]; then
        run "ark_js_vm --asm-interpreter=false --entry-point=$file_name --aot-file=$file_name $file_name.abc"
    fi

    if [[ "$arg" == "asmd" ]]; then
        run "gdb --args ark_js_vm --entry-point=$file_name --aot-file=$file_name $file_name.abc"
    fi

    if [[ "$arg" == "asmpd" ]]; then
        run "gdb --args ark_js_vm --asm-interpreter=false --entry-point=$file_name --aot-file=$file_name $file_name.abc"
    fi

    if [[ "$arg" == "dasm" ]]; then
        run "ark_disasm $file_name.abc $file_name.pa"
    fi

    if [[ "$arg" == "fixan" ]]; then
        run "perftool $file_name.an"
    fi

    # ark_js_vm --entry-point=t --aot-file=t t.abc
    if [[ $arg == "record" ]]; then
        run "perf record ark_js_vm --entry-point=$file_name --aot-file=$file_name $file_name.abc"
    fi

    if [[ $arg == "report" ]]; then
        run "perf report > $file_name.perf"
    fi
done
