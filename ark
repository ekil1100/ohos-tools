#!/bin/bash
# ark.bash
# export OHOS_PATH=~/repo/ohos/main

# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/thirdparty/icu
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/lib.unstripped/arkcompiler/ets_runtime
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/lib.unstripped/clang_x64/thirdparty/icu
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/arkcompiler/ets_frontend
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/arkcompiler/runtime_core
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/x64.release/arkcompiler/ets_runtime
DEBUG=on
LOG_LEVEL=warning

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/prebuilts/ohos-sdk/linux/11/toolchains
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/lib.unstripped/clang_x64/thirdparty/zlib
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/lib.unstripped/clang_x64/thirdparty/icu
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/lib.unstripped/clang_x64/arkcompiler/ets_runtime
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/runtime_core
if [[ $DEBUG == "on" ]]; then
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/exe.unstripped/clang_x64/arkcompiler/ets_runtime
else
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime
fi
export PATH=$PATH:$LD_LIBRARY_PATH

check() {
    if [ $? -ne 0 ]; then
        echo -e "\e[31m[Error] $@ command failed with exit code $?\e[0m"
        exit 1
    fi
}

run() {
    echo -e "\e[96m$@\e[0m"
    eval $@
    check $@
}

if [[ -z $1 ]]; then
    JSVM_PATH=$(dirname $(which ark_js_vm) 2>/dev/null || echo -e '\e[31mUnset\e[0m')
    LOG_LEVEL=$LOG_LEVEL || echo -e '\e[31mUnset\e[0m'
    echo "DEBUG: $DEBUG"
    echo "LOG_LEVEL: $LOG_LEVEL"
    echo "OHOS_PATH: $OHOS_PATH"
    echo "JSVM_PATH: $JSVM_PATH"
    exit 0
fi

# eval "$(ark init)"
if [[ $1 == "init" ]]; then
    dir=$(dirname $(realpath $0))
    cat $dir/ark.bash
    exit 0
fi

if [[ $1 == "clean" ]]; then
    rm -rf *.abc *.ap *.ai *.an *.pa *.abc.ll *.abc_opt.ll *.log *.perf
    exit 0
fi

if [[ $1 == "ut" ]]; then
    flags=(
        "--product-name rk3568"
        "--build-target ark_js_host_unittest"
    )
    if [[ $DEBUG == "on" ]]; then
        flags+=("--gn-args is_debug=true")
    fi
    run "$OHOS_PATH/build.sh ${flags[@]}"
    exit 0
fi

if [[ $1 == "262" ]]; then
    run "cd $OHOS_PATH/arkcompiler/ets_frontend"
    if [[ $2 == "aot" ]]; then
        flags=(
            "--es2021 all"
            "--threads 128"
            "--timeout 180000"
            "--libs-dir ../../out/rk3568/clang_x64/arkcompiler/ets_runtime:../../out/rk3568/clang_x64/thirdparty/icu:../../out/rk3568/clang_x64/thirdparty/zlib:../../prebuilts/clang/ohos/linux-x86_64/llvm/lib"
            "--ark-frontend-binary=../../out/rk3568/clang_x64/arkcompiler/ets_frontend/es2abc"
            "--ark-tool=../../out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_js_vm"
            "--ark-aot-tool=../../out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_aot_compiler"
            "--merge-abc-binary=../../out/rk3568/clang_x64/arkcompiler/ets_frontend/merge_abc"
            "--ark-aot"
            "--ark-frontend=es2panda"
        )
        if [[ -n $3 ]]; then
            run "python3 test262/run_test262.py --file $3 ${flags[@]}"
            exit 0
        fi
        run "python3 test262/run_test262.py ${flags[@]}"
    elif [[ $2 == "asm" ]]; then
        flags=(
            "--es2021 all"
            "--libs-dir $OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/icu:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/zlib:$OHOS_PATH/out/rk3568/clang_x64/thirdparty/cjson:$OHOS_PATH/prebuilts/clang/ohos/linux-x86_64/llvm/lib"
            "--ark-tool=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_runtime/ark_js_vm"
            "--ark-frontend-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/es2abc"
            "--merge-abc-binary=$OHOS_PATH/out/rk3568/clang_x64/arkcompiler/ets_frontend/merge_abc"
            "--ark-frontend=es2panda"
        )
        if [[ -n $3 ]]; then
            run "python3 test262/run_test262.py --file $3 ${flags[@]}"
            exit 0
        fi
        run "python3 test262/run_test262.py ${flags[@]}"
    fi
    exit 0
fi

if [[ $1 == "build" ]]; then
    args=(
        "--product-name rk3568"
        "--build-target ets_frontend_build"
        "--build-target ark_js_packages"
        "--build-target ark_js_host_linux_tools_packages"
    )
    if [[ $DEBUG == "on" ]]; then
        args+=("--gn-args is_debug=true")
    fi

    if [[ $@ =~ "-c" ]]; then
        args+=("--gn-flags=--export-compile-commands")
    fi

    if [[ $@ =~ "-f" ]]; then
        args+=("--fast-rebuild")
    fi

    if [[ $2 == "dasm" ]]; then
        run "$OHOS_PATH/build.sh --product-name rk3568 --build-target ark_host_linux_tools_packages"
    fi

    if [[ $2 == "pre" ]]; then
        run "$OHOS_PATH/build/prebuilts_download.sh"
    else
        run "$OHOS_PATH/build.sh ${args[@]}"
    fi
    exit 0
fi

if [[ -f $1 ]]; then
    file_path=$1
    file_name=$(basename "$file_path" | cut -d. -f1)
else
    file_path="t.ts"
    file_name="t"
fi

if [[ $2 == "--" ]]; then
    if [[ $1 == "abc" ]]; then
        run "es2abc ${@:3}"
        exit 0
    fi

    if [[ $1 == "aot" ]]; then
        run "ark_aot_compiler ${@:3}"
        exit 0
    fi

    if [[ $1 == "asm" ]]; then
        run "ark_js_vm ${@:3}"
        exit 0
    fi
fi

for arg in "$@"; do
    if [[ $arg == "abc" || $arg == "all" ]]; then
        args=(
            "--merge-abc"
            "--module"
            "--type-extractor"
            "--output $file_name.abc"
        )
        run "rm -f $file_name.abc"
        run "es2abc $file_path ${args[@]}"
    fi

    if [[ $arg == "ap" || $arg == "all" ]]; then
        args=(
            "--enable-pgo-profiler=true"
            "--compiler-pgo-profiler-path=$file_name.ap"
            "--entry-point=$file_name"
            "$file_name.abc"
        )
        if [[ $@ =~ "-info" ]]; then
            args=("--compiler-log=all0123" "--log-level=info" "${args[@]}")
        fi
        run "rm -f $file_name.ap"
        run "ark_js_vm ${args[@]}"
    fi

    if [[ $arg == "aot" || $arg == "all" ]]; then
        args=(
            "--compiler-pgo-profiler-path=$file_name.ap"
            "--aot-file=$file_name"
            "$file_name.abc"
        )
        if [[ $@ =~ "-info" ]]; then
            args=("--compiler-log=all0123" "--log-level=info" "${args[@]}")
        fi
        if [[ $@ =~ "-bc" ]]; then
            args=("--compiler-trace-bc=true" "${args[@]}")
        fi
        if [[ $@ =~ "-p" ]]; then
            for i in "${!args[@]}"; do
                if [[ ${args[i]} != "--compiler-pgo-profiler-path=$file_name.ap" ]]; then
                    new_args+=("${args[i]}")
                fi
            done
            args=("${new_args[@]}")
        fi
        if [[ $@ =~ "-o" ]]; then
            args+=("> $file_name.log")
        fi
        run "rm -f $file_name.an $file_name.ai"
        if [[ $@ =~ "-d" ]]; then
            run "gdb --args ark_aot_compiler ${args[@]}"
        else
            run "ark_aot_compiler ${args[@]}"
        fi
    fi

    if [[ "$arg" == "asm" || $arg == "all" ]]; then
        args=(
            "--log-debug=builtins"
            "--entry-point=$file_name"
            "--aot-file=$file_name"
            "$file_name.abc"
        )
        if [[ $@ =~ "-bc" || $@ =~ "-info" ]]; then
            args=("--compiler-log=all0123" "--log-level=info" "${args[@]}")
        fi
        if [[ $@ =~ "-p" ]]; then
            args=("--asm-interpreter=false" "${args[@]}")
        fi
        if [[ $@ =~ "-d" ]]; then
            run "gdb --args ark_js_vm ${args[@]}"
        else
            run "ark_js_vm ${args[@]}"
        fi
    fi

    if [[ "$arg" == "dasm" ]]; then
        run "ark_disasm $file_name.abc $file_name.pa"
    fi
done
